# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index()

# APIs in EmployeeController
GET     /employees                      controllers.EmployeeController.listEmployees()
GET     /employees/:id                  controllers.EmployeeController.retrieve(id:Int)
POST    /employees                      controllers.EmployeeController.create(request:Request)
PUT     /employees/                     controllers.EmployeeController.update(request:Request)
DELETE  /employees/:id                  controllers.EmployeeController.delete(id:Int)

# APIs in CompoundController
GET     /compounds/list                         controllers.CompoundController.listCompounds()
GET     /compounds                              controllers.CompoundController.listCompoundsInRange(startId: Int, endId: Int)
GET     /compounds/:id                          controllers.CompoundController.retrieve(id: Int)
POST    /compounds                              controllers.CompoundController.create(request:Request)
PUT     /compounds/:id                          controllers.CompoundController.update(request:Request, id:Int)
DELETE  /compounds/:id                          controllers.CompoundController.delete(id: Int)
PATCH   /compounds/:id                          controllers.CompoundController.patchCompound(request:Request, id: Int)

# APIs in Pathways
GET     /pathways/list                          controllers.PathwayController.listPathways()
GET     /pathways                               controllers.PathwayController.listPathwaysInRange(startId: Int, endId: Int)
GET     /pathways/:id                           controllers.PathwayController.retrieve(id: Int)
POST    /pathways                               controllers.PathwayController.create(request: Request)
PUT     /pathways/:id                           controllers.PathwayController.update(request: Request, id:Int)
DELETE  /pathways/:id                           controllers.PathwayController.delete(id: Int)
PATCH   /pathways/:id                           controllers.PathwayController.patchPathway(request: Request, id: Int)

# APIs in MsmsController
GET     /msms/list                              controllers.MsmsController.listMsms()
GET     /msms                                   controllers.MsmsController.listMsmsInRange(startId: Int, endId: Int)
GET     /msms/:id                               controllers.MsmsController.retrieve(id: Int)
POST    /msms                                   controllers.MsmsController.create(request: Request)
PUT     /msms/:id                               controllers.MsmsController.update(request: Request, id:Int)
DELETE  /msms/:id                               controllers.MsmsController.delete(id: Int)
PATCH   /msms/:id                               controllers.MsmsController.patchMsms(request: Request, id: Int)

# APIs in CeEffMobController
GET     /ceEffMob/list                          controllers.CeEffMobController.listCeEffMobs()
GET     /ceEffMob                               controllers.CeEffMobController.listCeEffMobsInRange(startId: Int, endId: Int)
GET     /ceEffMob/:id                           controllers.CeEffMobController.retrieve(id: Int)
POST    /ceEffMob                               controllers.CeEffMobController.create(request: Request)
PUT     /ceEffMob/:id                           controllers.CeEffMobController.update(request: Request, id:Int)
DELETE  /ceEffMob/:id                           controllers.CeEffMobController.delete(id: Int)
PATCH   /ceEffMob/:id                           controllers.CeEffMobController.patchCeEffMob(request: Request, id: Int)

# APIs in ChainsController
GET     /chains/list                            controllers.ChainsController.listChains()
GET     /chains                                 controllers.ChainsController.listChainsInRange(startId: Int, endId: Int)
GET     /chains/:id                             controllers.ChainsController.retrieve(id: Int)
POST    /chains                                 controllers.ChainsController.create(request: Request)
PUT     /chains/:id                             controllers.ChainsController.update(request: Request, id:Int)
DELETE  /chains/:id                             controllers.ChainsController.delete(id: Int)
PATCH   /chains/:id                             controllers.ChainsController.patchChains(request: Request, id: Int)

# APIs in OntologyTermsController
GET     /ontologyTerms/list                       controllers.OntologyTermsController.listOntologyTerms()
GET     /ontologyTerms                            controllers.OntologyTermsController.listOntologyTermsInRange(startId: Int, endId: Int)
GET     /ontologyTerms/:id                        controllers.OntologyTermsController.retrieve(id: Int)
POST    /ontologyTerms                            controllers.OntologyTermsController.create(request: Request)
PUT     /ontologyTerms/:id                        controllers.OntologyTermsController.update(request: Request, id:Int)
DELETE  /ontologyTerms/:id                        controllers.OntologyTermsController.delete(id: Int)
PATCH   /ontologyTerms/:id                        controllers.OntologyTermsController.patchOntologyTerms(request: Request, id: Int)

# APIs in ClassyfireClassificationController
GET     /classyfireclassification/list            controllers.ClassyfireClassificationController.listClassyfireClassifications()
GET     /classyfireclassification                 controllers.ClassyfireClassificationController.listClassyfireClassificationInRange(startId: Int, endId: Int)
GET     /classyfireclassification/:id             controllers.ClassyfireClassificationController.retrieve(id: Int)
POST    /classyfireclassification                 controllers.ClassyfireClassificationController.create(request: Request)
PUT     /classyfireclassification/:id             controllers.ClassyfireClassificationController.update(request: Request, id:Int)
DELETE  /classyfireclassification/:id             controllers.ClassyfireClassificationController.delete(id: Int)
PATCH   /classyfireclassification/:id             controllers.ClassyfireClassificationController.patchClassyfireClassification(request: Request, id: Int)

# APIs in CeExperimentalPropertiesController
GET     /ceExpProps/list                          controllers.CeExperimentalPropertiesController.listCeExperimentalProperties()
GET     /ceExpProps                               controllers.CeExperimentalPropertiesController.listCeExperimentalPropertiesInRange(startId: Int, endId: Int)
GET     /ceExpProps/:id                           controllers.CeExperimentalPropertiesController.retrieve(id: Int)
POST    /ceExpProps                               controllers.CeExperimentalPropertiesController.create(request: Request)
PUT     /ceExpProps/:id                           controllers.CeExperimentalPropertiesController.update(request: Request, id:Int)
DELETE  /ceExpProps/:id                           controllers.CeExperimentalPropertiesController.delete(id: Int)
PATCH   /ceExpProps/:id                           controllers.CeExperimentalPropertiesController.patchCeExperimentalProperties(request: Request, id: Int)

# APIs in CompoundCas
GET     /compoundCas/list                        controllers.CompoundCasController.listCompoundCas()
GET     /compoundCas                             controllers.CompoundCasController.listCompoundCasInRange(startId: String, endId: String)
GET     /compoundCas/:id                         controllers.CompoundCasController.retrieve(id: String)
POST    /compoundCas                             controllers.CompoundCasController.create(request: Request)
PUT     /compoundCas/:id                         controllers.CompoundCasController.update(request: Request, id: String)
DELETE  /compoundCas/:id                         controllers.CompoundCasController.delete(id: String)
PATCH   /compoundCas/:id                         controllers.CompoundCasController.patchCompoundCas(request: Request, id: String)

# APIs in CeExpPropMetadataController
GET     /ceExpPropMetadata/list                     controllers.CeExpPropMetadataController.listCeExpPropMetadata()
GET     /ceExpPropMetadata                          controllers.CeExpPropMetadataController.listCeExpPropMetadataInRange(startId: Int, endId: Int)
GET     /ceExpPropMetadata/:id                      controllers.CeExpPropMetadataController.retrieve(id: Int)
POST    /ceExpPropMetadata                          controllers.CeExpPropMetadataController.create(request: Request)
PUT     /ceExpPropMetadata/:id                      controllers.CeExpPropMetadataController.update(request: Request, id: Int)
DELETE  /ceExpPropMetadata/:id                      controllers.CeExpPropMetadataController.delete(id: Int)
PATCH   /ceExpPropMetadata/:id                      controllers.CeExpPropMetadataController.patchCeExpPropMetadata(request: Request, id: Int)

# APIs in CompoundCeProductIonController
GET     /compoundCeProductIon/list                 controllers.CompoundCeProductIonController.listCompoundCeProductIon()
GET     /compoundCeProductIon                      controllers.CompoundCeProductIonController.listCompoundCeProductIonInRange(startId: Int, endId: Int)
GET     /compoundCeProductIon/:id                  controllers.CompoundCeProductIonController.retrieve(id: Int)
POST    /compoundCeProductIon                      controllers.CompoundCeProductIonController.create(request: Request)
PUT     /compoundCeProductIon/:id                  controllers.CompoundCeProductIonController.update(request: Request, id: Int)
DELETE  /compoundCeProductIon/:id                  controllers.CompoundCeProductIonController.delete(id: Int)
PATCH   /compoundCeProductIon/:id                  controllers.CompoundCeProductIonController.patchCompoundCeProductIon(request: Request, id: Int)

# APIs for CompoundChain
GET     /compoundChain/:compoundId/:chainId   controllers.CompoundChainController.retrieve(compoundId: Int, chainId: Int)
GET     /compoundChain/list                   controllers.CompoundChainController.listCompoundChain()
GET     /compoundChain                        controllers.CompoundChainController.listCompoundChainInRange(startId: Int, endId: Int)
GET     /compoundChain/:compoundId            controllers.CompoundChainController.listCompoundChainByCompoundId(compoundId: Int)
POST    /compoundChain/                       controllers.CompoundChainController.create(request: Request)
PUT     /compoundChain/:compoundId/:chainId   controllers.CompoundChainController.update(request: Request, compoundId: Int, chainId: Int)
DELETE  /compoundChain/:compoundId/:chainId   controllers.CompoundChainController.delete(compoundId: Int, chainId: Int)
PATCH   /compoundChain/:compoundId/:chainId   controllers.CompoundChainController.patchCompoundChain(request: Request, compoundId: Int, chainId: Int)

# APIs for CompoundClassyfire
GET     /compoundClassyfire/:compoundId/:chainId   controllers.CompoundClassyfireController.retrieve(compoundId: Int, nodeId: String)
GET     /compoundClassyfire/list                   controllers.CompoundClassyfireController.listCompoundClassyfire()
GET     /compoundClassyfire                        controllers.CompoundClassyfireController.listCompoundClassyfireInRange(startId: Int, endId: Int)
GET     /compoundClassyfire/:compoundId            controllers.CompoundClassyfireController.listCompoundClassyfireByCompoundId(compoundId: Int)
POST    /compoundClassyfire/                       controllers.CompoundClassyfireController.create(request: Request)
PUT     /compoundClassyfire/:compoundId/:chainId   controllers.CompoundClassyfireController.update(request: Request, compoundId: Int, nodeId: String)
DELETE  /compoundClassyfire/:compoundId/:chainId   controllers.CompoundClassyfireController.delete(compoundId: Int, nodeId: String)
PATCH   /compoundClassyfire/:compoundId/:chainId   controllers.CompoundClassyfireController.patchCompoundClassyfire(request: Request, compoundId: Int, nodeId: String)

# APIs for CompoundOntology
GET     /compoundOntology/:compoundId/:chainId   controllers.CompoundOntologyController.retrieve(compoundId: Int, ontologyTermId: Int)
GET     /compoundOntology/list                   controllers.CompoundOntologyController.listCompoundOntology()
GET     /compoundOntology                        controllers.CompoundOntologyController.listCompoundOntologyInRange(startId: Int, endId: Int)
GET     /compoundOntology/:compoundId            controllers.CompoundOntologyController.listCompoundOntologyByCompoundId(compoundId: Int)
POST    /compoundOntology/                       controllers.CompoundOntologyController.create(request: Request)
PUT     /compoundOntology/:compoundId/:chainId   controllers.CompoundOntologyController.update(request: Request, compoundId: Int, ontologyTermId: Int)
DELETE  /compoundOntology/:compoundId/:chainId   controllers.CompoundOntologyController.delete(compoundId: Int, ontologyTermId: Int)
PATCH   /compoundOntology/:compoundId/:chainId   controllers.CompoundOntologyController.patchCompoundOntology(request: Request, compoundId: Int, ontologyTermId: Int)

# APIs for CompoundPathways
GET     /compoundPathways/:compoundId/:chainId   controllers.CompoundPathwaysController.retrieve(compoundId: Int, pathwayId: Int)
GET     /compoundPathways/list                   controllers.CompoundPathwaysController.listCompoundPathways()
GET     /compoundPathways                        controllers.CompoundPathwaysController.listCompoundPathwaysInRange(startId: Int, endId: Int)
GET     /compoundPathways/:compoundId            controllers.CompoundPathwaysController.listCompoundPathwaysByCompoundId(compoundId: Int)
POST    /compoundPathways/                       controllers.CompoundPathwaysController.create(request: Request)
PUT     /compoundPathways/:compoundId/:chainId   controllers.CompoundPathwaysController.update(request: Request, compoundId: Int, pathwayId: Int)
DELETE  /compoundPathways/:compoundId/:chainId   controllers.CompoundPathwaysController.delete(compoundId: Int, pathwayId: Int)
PATCH   /compoundPathways/:compoundId/:chainId   controllers.CompoundPathwaysController.patchCompoundPathways(request: Request, compoundId: Int, pathwayId: Int)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
